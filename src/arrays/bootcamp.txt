Insertion into a full array can be handled by resizing.

Resizing - Allocates a new array with additional memory and copy over entries from original array.

Instead of DELETING an entry in array, consider OVERWRITING it.

Array index out of bounds is a common error. Be careful while accessing.

Don't worry about preserving the integrity of an array 
(sortedness, keeping equal entries together, etc.) until it is time to return.
So that, all the operations associated with it happen at the end to 
save CPU cycles from investing in change that will be overwritten further down
the code.

Array serves as a good structure when the distribution of elements is known
in advance.

When operating on 2D arrays, use parallel logic for rows and for columns.

Sometimes it is easier to SIMULATE THE SPECIFICATION, than to analytically solve for result.
For e.g. rather than writing formula for ith entry in spiral order, just compute
the output from the beginning.

-----------------------------------------

Deep equals = Two array references are considered deeply equal if both are null, 
or if they refer to arrays that contain the same number of elements and all 
corresponding pairs of elements in the two arrays are deeply equal.

Two possibly null elements e1 and e2 are deeply equal if any of the following conditions hold:

    e1 and e2 are both arrays of object reference types, and Arrays.deepEquals(e1, e2) would return true
    e1 and e2 are arrays of the same primitive type, and the appropriate overloading of Arrays.equals(e1, e2) would return true.
    e1 == e2
    e1.equals(e2) would return true. 

Note that this definition permits null elements at any depth. 

-----------------------------------------

Arrays.asList is O(1) and is very helpful in interview situations.
Arrays.asList returns a partially mutable object. ADD and DELETE cannot happen but reordering can.